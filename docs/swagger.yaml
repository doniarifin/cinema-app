definitions:
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.RegisterResponse:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  dto.UserReponse:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  dto.UserRequest:
    properties:
      email:
        type: string
      name:
        type: string
    type: object
  handler.DeleteReponse:
    properties:
      message:
        type: string
    type: object
  handler.LoginResponse:
    properties:
      message:
        type: string
      token:
        type: string
    type: object
  model.User:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/Delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user given their ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.DeleteReponse'
      security:
      - BearerAuth: []
      tags:
      - User
  /api/v1/GetAllUsers:
    get:
      consumes:
      - application/json
      description: get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      security:
      - BearerAuth: []
      tags:
      - User
  /api/v1/GetCurrentUser:
    get:
      consumes:
      - application/json
      description: get current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      security:
      - BearerAuth: []
      tags:
      - User
  /api/v1/Update/{id}:
    put:
      consumes:
      - application/json
      description: Update a user's email
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserReponse'
      security:
      - BearerAuth: []
      tags:
      - User
  /login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login Request
        in: body
        name: request
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.LoginResponse'
      tags:
      - Auth
  /register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Register Request
        in: body
        name: request
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RegisterResponse'
      tags:
      - Auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
